{"version":3,"sources":["AddNewItemForm.js","TodoListTask.js","TodoListTasks.js","TodoListFooter.js","TodoListTitle.js","TodoList.js","App.js","serviceWorker.js","store.js","index.js"],"names":["AddNewItemForm","state","error","title","onAddItemClick","newTitle","_this","trim","setState","props","addItem","onTitleChanged","e","currentTarget","value","onKeyPress","key","render","react_default","a","createElement","className","onChange","type","placeholder","onClick","React","Component","TodoListTask","isEditMode","priority","activatedEditMode","deActivatedEditMode","onIsDoneChanged","changeStatus","task","id","checked","onIsTitleChange","changeTitle","isTaskDeleted","deleteTask","onIsPriorityChanged","changePriority","isDone","concat","autoFocus","onBlur","onDoubleClick","index_es","icon","faTimes","TodoListTasks","taskElement","tasks","map","src_TodoListTask","TodoListFooter","isHidden","onAllFilterClick","changeFilter","onCompletedFilterClick","onActiveFilterClick","onShowFiltersClick","onHideFiltersClick","classForAll","filerValue","classForCompleted","classForActive","TodoListTitle","TodoList","filterValue","nextTaskId","saveState","stateAsString","JSON","stringify","localStorage","setItem","restoreState","getItem","parse","forEach","t","addTask","newTask","taskId","newFilterValue","changeTask","obj","isTodoListDeleted","deleteTodoList","filteredTasks","filter","src_TodoListTitle","src_AddNewItemForm","src_TodoListTasks","src_TodoListFooter","this","ConnectedTodoList","connect","dispatch","todolistId","App","todolists","nextTodoListId","addTodoList","newTodoList","createTodolist","deleteTodolist","todolist","tl","src_TodoList","ConnectedApp","Boolean","window","location","hostname","match","initialState","store","createStore","arguments","length","undefined","action","Object","objectSpread2","toConsumableArray","ReactDOM","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mOAwDeA,oNAjDXC,MAAQ,CACJC,OAAO,EACPC,MAAO,MAGXC,eAAiB,WACb,IAAIC,EAAWC,EAAKL,MAAME,MAAMI,OACf,KAAbF,EACAC,EAAKE,SAAS,CAACN,OAAO,KAEtBI,EAAKE,SAAS,CAACL,MAAO,GAAID,OAAO,IACjCI,EAAKG,MAAMC,QAAQL,OAI3BM,eAAiB,SAACC,GACdN,EAAKE,SAAS,CACVN,OAAO,EACPC,MAAOS,EAAEC,cAAcC,WAG/BC,WAAa,SAACH,GACI,UAAVA,EAAEI,KACFV,EAAKF,oBAKba,OAAS,WACL,IAAIf,GAA6B,IAArBI,EAAKL,MAAMC,MAAiB,QAAU,GAClD,OAGIgB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBAGXH,EAAAC,EAAAC,cAAA,SAAOC,UAAWnB,EACXY,MAAOR,EAAKL,MAAME,MAAOmB,SAAUhB,EAAKK,eACxCI,WAAYT,EAAKS,WACjBQ,KAAK,OAAOC,YAAY,kBAC/BN,EAAAC,EAAAC,cAAA,UAAQK,QAASnB,EAAKF,gBAAtB,qBA3CasB,IAAMC,4BCwEpBC,8MApEX3B,MAAQ,CACJ4B,YAAY,EACZC,SAAU,CAAC,OAAQ,SAAU,UAEjCC,kBAAoB,WAChBzB,EAAKE,SAAS,CACVqB,YAAY,OAKpBG,oBAAsB,WAClB1B,EAAKE,SAAS,CACVqB,YAAY,OAMpBI,gBAAkB,SAACrB,GAChBN,EAAKG,MAAMyB,aAAa5B,EAAKG,MAAM0B,KAAKC,GAAIxB,EAAEC,cAAcwB,YAG/DC,gBAAkB,SAAC1B,GACfN,EAAKG,MAAM8B,YAAYjC,EAAKG,MAAM0B,KAAKC,GAAIxB,EAAEC,cAAcC,UAE/D0B,cAAgB,WACZlC,EAAKG,MAAMgC,WAAWnC,EAAKG,MAAM0B,KAAKC,OAG1CM,oBAAsB,SAAC9B,GACnBN,EAAKG,MAAMkC,eAAerC,EAAKG,MAAM0B,KAAKC,GAAGxB,EAAEC,cAAcC,UAMjEG,OAAS,WACL,IAAIoB,GAAqC,IAA3B/B,EAAKG,MAAM0B,KAAKS,OAAkB,OAAS,GACzD,OACI1B,EAAAC,EAAAC,cAAA,OAAKC,UAAS,mBAAAwB,OAAsBR,IAChCnB,EAAAC,EAAAC,cAAA,SAAOG,KAAK,WAAWc,QAAS/B,EAAKG,MAAM0B,KAAKS,OAAQtB,SAAUhB,EAAK2B,kBACtE3B,EAAKL,MAAM4B,WAAaX,EAAAC,EAAAC,cAAA,SAAOE,SAAUhB,EAAKgC,gBAAiBxB,MAAOR,EAAKG,MAAM0B,KAAKhC,MAAO2C,WAAW,EACzEC,OAAQzC,EAAK0B,sBAAyBd,EAAAC,EAAAC,cAAA,QAAM4B,cAAe1C,EAAKyB,mBAC3FzB,EAAKG,MAAM0B,KAAKC,GADiD,MAC1C9B,EAAKG,MAAM0B,KAAKhC,OAJhD,IASIe,EAAAC,EAAAC,cAAA,yBACQF,EAAAC,EAAAC,cAAA,UAAQE,SAAUhB,EAAKoC,oBAAqB5B,MAAOR,EAAKG,MAAM0B,KAAKL,UAC/DZ,EAAAC,EAAAC,cAAA,UAAQN,MAAOR,EAAKL,MAAM6B,SAAS,IAAMxB,EAAKL,MAAM6B,SAAS,IAC7DZ,EAAAC,EAAAC,cAAA,UAAQN,MAAOR,EAAKL,MAAM6B,SAAS,IAAMxB,EAAKL,MAAM6B,SAAS,IAC7DZ,EAAAC,EAAAC,cAAA,UAAQN,MAAOR,EAAKL,MAAM6B,SAAS,IAAKxB,EAAKL,MAAM6B,SAAS,MAIxEZ,EAAAC,EAAAC,cAAA,QAAMK,QAASnB,EAAKkC,eAApB,IAAoCtB,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAiB5B,UAAU,QAAQ6B,KAAMC,MAA7E,mBA1DWzB,IAAMC,WCmBlByB,8MAnBXnC,OAAS,WACL,IAAIoC,EAAc/C,EAAKG,MAAM6C,MAAMC,IAAI,SAAApB,GAAI,OACvCjB,EAAAC,EAAAC,cAACoC,EAAD,CAAcxC,IAAKmB,EAAKC,GAAIO,eAAgBrC,EAAKG,MAAMkC,eACzCF,WAAYnC,EAAKG,MAAMgC,WAAYF,YAAajC,EAAKG,MAAM8B,YAAaJ,KAAMA,EAAMD,aAAc5B,EAAKG,MAAMyB,iBAG/H,OACIhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACVgC,gBAVW3B,IAAMC,WC6CnB8B,8MA7CXxD,MAAQ,CACJyD,UAAU,KAKdC,iBAAmB,WAAOrD,EAAKG,MAAMmD,aAAa,UAClDC,uBAAyB,WAAOvD,EAAKG,MAAMmD,aAAa,gBACxDE,oBAAsB,WAAOxD,EAAKG,MAAMmD,aAAa,aACrDG,mBAAqB,WACjBzD,EAAKE,SAAS,CAACkD,UAAU,OAG7BM,mBAAqB,WACjB1D,EAAKE,SAAS,CAACkD,UAAU,OAK7BzC,OAAS,WACL,IAAIgD,EAAwC,QAA1B3D,EAAKG,MAAMyD,WAAuB,gBAAkB,GAClEC,EAA8C,cAA1B7D,EAAKG,MAAMyD,WAA6B,gBAAkB,GAC9EE,EAA2C,WAA1B9D,EAAKG,MAAMyD,WAA0B,gBAAkB,GAG5E,OACIhD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACRf,EAAKL,MAAMyD,UAAYxC,EAAAC,EAAAC,cAAA,WAC1BF,EAAAC,EAAAC,cAAA,UAAQK,QAASnB,EAAKqD,iBAAkBtC,UAAW4C,GAAnD,OACA/C,EAAAC,EAAAC,cAAA,UAAQK,QAASnB,EAAKuD,uBAAwBxC,UAAW8C,GAAzD,aACAjD,EAAAC,EAAAC,cAAA,UAAQK,QAASnB,EAAKwD,oBAAqBzC,UAAW+C,GAAtD,YAIE9D,EAAKL,MAAMyD,UAAYxC,EAAAC,EAAAC,cAAA,QAAMK,QAASnB,EAAK0D,oBAApB,QACxB1D,EAAKL,MAAMyD,UAAYxC,EAAAC,EAAAC,cAAA,QAAMK,QAASnB,EAAKyD,oBAApB,sBApCXrC,IAAMC,WCepB0C,8MAXXpD,OAAS,WAGL,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,yBAAyBf,EAAKG,MAAMN,qBAVtCuB,IAAMC,kBCO5B2C,8MAGFrE,MAAQ,CACJqD,MAAO,GAOPiB,YAAa,SAEjBC,WAAa,IACbC,UAAY,WACR,IAAIC,EAAgBC,KAAKC,UAAUtE,EAAKL,OACxC4E,aAAaC,QAAQ,SAAWxE,EAAKG,MAAM2B,GAAIsC,MAGnDK,aAAe,WACX,IAAI9E,EAAQ,CACRqD,MAAO,GACPiB,YAAa,OAEbG,EAAgBG,aAAaG,QAAQ,SAAW1E,EAAKG,MAAM2B,IAC3DsC,IACAzE,EAAQ0E,KAAKM,MAAMP,IAEvBpE,EAAKE,SAASP,EAAO,WACjBK,EAAKL,MAAMqD,MAAM4B,QAAQ,SAAAC,GACbA,EAAE/C,IAAM9B,EAAKkE,aACblE,EAAKkE,WAAaW,EAAE/C,GAAK,UAW7CgD,QAAU,SAAC/E,GAEP,IAAIgF,EAAU,CACVjD,GAAI9B,EAAKkE,WACTrE,MAAOE,EACPuC,QAAQ,EACRd,SAAU,IAEdxB,EAAKkE,aAOLlE,EAAKG,MAAM2E,QAAQ9E,EAAKG,MAAM2B,GAAIiD,MAItC5C,WAAa,SAAC6C,GAQVhF,EAAKG,MAAMgC,WAAWnC,EAAKG,MAAM2B,GAAIkD,MAKzC1B,aAAe,SAAC2B,GACZjF,EAAKE,SAAS,CACV+D,YAAagB,OAIrBC,WAAa,SAACF,EAAQG,GAYlBnF,EAAKG,MAAM+E,WAAYlF,EAAKG,MAAM2B,GAAGkD,EAAQG,MAGjDvD,aAAe,SAACoD,EAAQ1C,GACpBtC,EAAKkF,WAAWF,EAAQ,CAAC1C,OAAQA,OAIrCL,YAAc,SAAC+C,EAAQnF,GACnBG,EAAKkF,WAAWF,EAAQ,CAACnF,MAAOA,OAIpCwC,eAAiB,SAAC2C,EAAQxD,GACtBxB,EAAKkF,WAAWF,EAAQ,CAACxD,SAAUA,OAGvC4D,kBAAoB,WAChBpF,EAAKG,MAAMkF,eAAerF,EAAKG,MAAM2B,OAKzCnB,OAAS,WACL,IAAI2E,EAAgBtF,EAAKG,MAAM6C,MAAMuC,OAAO,SAAAV,GACxC,OAAQ7E,EAAKL,MAAMsE,aACf,IAAK,SACD,OAAoB,IAAbY,EAAEvC,OACb,IAAK,YACD,OAAoB,IAAbuC,EAAEvC,OACb,IAAK,MAGL,QACI,OAAO,KAKnB,OAEI1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAC0E,EAAD,CAAe3F,MAAOG,EAAKG,MAAMN,QADrC,IAC8Ce,EAAAC,EAAAC,cAAA,QAAMK,QAASnB,EAAKoF,mBAApB,IAAwCxE,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAClF5B,UAAU,eAAe6B,KAAMC,OAC/BjC,EAAAC,EAAAC,cAAC2E,EAAD,CAAgB5F,MAAOG,EAAKG,MAAMN,MAAOO,QAASJ,EAAK8E,UACvDlE,EAAAC,EAAAC,cAAC4E,EAAD,CAAerD,eAAgBrC,EAAKqC,eACrBF,WAAYnC,EAAKmC,WAAYF,YAAajC,EAAKiC,YAAae,MAAOsC,EACnE1D,aAAc5B,EAAK4B,eAClChB,EAAAC,EAAAC,cAAC6E,EAAD,CAAgB/B,WAAY5D,EAAKL,MAAMsE,YAAaX,aAActD,EAAKsD,mFArG/EsC,KAAKnB,sBAvCUrD,IAAMC,WAiMdwE,EAFWC,YAAQ,KApCP,SAACC,GACxB,MAAO,CACHjB,QAAS,SAACkB,EAAYjB,GAQlBgB,EAPa,CACT9E,KAAM,WACN8D,UACAiB,gBAMRd,WAAY,SAACc,EAAYhB,EAAQG,GAS7BY,EARa,CACT9E,KAAM,cACN+E,aACAhB,SACAG,SAMRhD,WAAY,SAAC6D,EAAYhB,GAQrBe,EAPa,CACT9E,KAAM,cACN+E,aACAhB,cASUc,CAAkC9B,GChMtDiC,8MACFtG,MAAQ,CACJuG,UAAW,MAOfC,eAAiB,IACjBhC,UAAY,WACR,IAAIC,EAAgBC,KAAKC,UAAUtE,EAAKL,OACxC4E,aAAaC,QAAQ,YAAaJ,MAGtCK,aAAe,WACX,IAAI9E,EAAQ,CACRuG,UAAW,IAEX9B,EAAgBG,aAAaG,QAAQ,aACrCN,IACAzE,EAAQ0E,KAAKM,MAAMP,IAEvBpE,EAAKE,SAASP,EAAO,WACjBK,EAAKL,MAAMuG,UAAUtB,QAAQ,SAAAC,GACjBA,EAAE/C,IAAM9B,EAAKmG,iBACbnG,EAAKmG,eAAiBtB,EAAE/C,GAAK,UAWjDsE,YAAc,SAACvG,GACX,IAAIwG,EAAc,CACdvE,GAAI9B,EAAKmG,eACTtG,MAAOA,EACPmD,MAAO,IAEXhD,EAAKmG,iBAKLnG,EAAKG,MAAMmG,eAAeD,MAI9BhB,eAAiB,SAACW,GAMdhG,EAAKG,MAAMoG,eAAeP,MAQ9BrF,OAAS,WACL,IAAM6F,EAAWxG,EAAKG,MAAM+F,UAAUjD,IAAI,SAAAwD,GAAE,OAAI7F,EAAAC,EAAAC,cAAC4F,EAAD,CAAUhG,IAAK+F,EAAG3E,GAAIkB,MAAOyD,EAAGzD,MACtBqC,eAAgBrF,EAAKqF,eAAgBvD,GAAI2E,EAAG3E,GAC5CjC,MAAO4G,EAAG5G,UAEpE,OAAQe,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC2E,EAAD,CAAgBrF,QAASJ,EAAKoG,cAC9BxF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACVyF,uEAxCbZ,KAAKnB,sBAlCKrD,IAAMC,WAkHTsF,EADMb,YA5BG,SAACnG,GACrB,MAAO,CACHuG,UAAWvG,EAAMuG,YAIE,SAACH,GACxB,MAAO,CACHO,eAAgB,SAACD,GAMbN,EALa,CACT9E,KAAM,eACNoF,YAAaA,KAMrBE,eAAgB,SAACP,GAMbD,EALa,CACT9E,KAAM,kBACL+E,kBAQIF,CAA6CG,GC9G9CW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,qFCfAC,EAAe,CACjBf,UAAW,IAqFAgB,EADDC,YA3EE,WAAkC,IAAjCxH,EAAiCyH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBH,EAAcM,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC9C,OAAQC,EAAOtG,MACX,IAAK,eACD,OAAOuG,OAAAC,EAAA,EAAAD,CAAA,GACA7H,EADP,CAEIuG,UAAS,GAAA3D,OAAAiF,OAAAE,EAAA,EAAAF,CAAM7H,EAAMuG,WAAZ,CAAuBqB,EAAOlB,gBAE/C,IAAK,WAED,OAAOmB,OAAAC,EAAA,EAAAD,CAAA,GACA7H,EADP,CAEIuG,UAAWvG,EAAMuG,UAAUjD,IAAI,SAAAwD,GAC3B,OAAIA,EAAG3E,KAAOyF,EAAOvB,WACVwB,OAAAC,EAAA,EAAAD,CAAA,GAAIf,EAAX,CAAezD,MAAK,GAAAT,OAAAiF,OAAAE,EAAA,EAAAF,CAAMf,EAAGzD,OAAT,CAAgBuE,EAAOxC,YAEhC0B,MAM3B,IAAK,cAED,OAAOe,OAAAC,EAAA,EAAAD,CAAA,GACA7H,EADP,CAEIuG,UAAWvG,EAAMuG,UAAUjD,IAAI,SAAAwD,GAC3B,OAAIA,EAAG3E,KAAOyF,EAAOvB,WACVwB,OAAAC,EAAA,EAAAD,CAAA,GAAIf,EAAX,CAAezD,MAAMwE,OAAAE,EAAA,EAAAF,CAAKf,EAAGzD,MAAMuC,OAAO,SAAA1D,GAAI,OAAIA,EAAKC,KAAOyF,EAAOvC,YAE9DyB,MAKvB,IAAK,cAED,OAAOe,OAAAC,EAAA,EAAAD,CAAA,GACA7H,EADP,CAEIuG,UAAWvG,EAAMuG,UAAUjD,IAAI,SAAAwD,GAC3B,OAAIA,EAAG3E,KAAOyF,EAAOvB,WACVwB,OAAAC,EAAA,EAAAD,CAAA,GAAIf,EAAX,CAAezD,MAAMwE,OAAAE,EAAA,EAAAF,CAAKf,EAAGzD,MAAMC,IAAI,SAAApB,GACnC,OAAIA,EAAKC,KAAOyF,EAAOvC,OACZwC,OAAAC,EAAA,EAAAD,CAAA,GACA3F,EADP,GACgB0F,EAAOpC,KAGhBtD,OAIR4E,MAMvB,IAAK,kBAED,OAAOe,OAAAC,EAAA,EAAAD,CAAA,GACA7H,EADP,CAEIuG,UAAWvG,EAAMuG,UAAUX,OAAO,SAAAkB,GAAO,OAAOA,EAAG3E,KAAOyF,EAAOvB,eAIzE,QACI,OAAOrG,KCtEnBgI,IAAShH,OAAOC,EAAAC,EAAAC,cAAC8G,EAAA,EAAD,CAAUV,MAAOA,GAC7BtG,EAAAC,EAAAC,cAAC+G,EAAD,OACSC,SAASC,eAAe,SFuH/B,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.fdd2e6d1.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\nclass AddNewItemForm extends React.Component {\n\n\n    state = {\n        error: false,\n        title: ''\n    }\n\n    onAddItemClick = () => {\n        let newTitle = this.state.title.trim();\n        if (newTitle === '') {\n            this.setState({error: true})\n        } else {\n            this.setState({title: '', error: false})\n            this.props.addItem(newTitle)\n        }\n\n    }\n    onTitleChanged = (e) => {\n        this.setState({\n            error: false,\n            title: e.currentTarget.value\n        })\n    }\n    onKeyPress = (e) => {\n        if (e.key === 'Enter') {\n            this.onAddItemClick();\n        }\n\n    }\n\n    render = () => {\n        let error = this.state.error === true ? 'error' : ''\n        return (\n\n\n            <div className=\"todoList-newTaskForm\">\n\n\n                <input className={error}\n                       value={this.state.title} onChange={this.onTitleChanged}\n                       onKeyPress={this.onKeyPress}\n                       type=\"text\" placeholder=\"New item name\"/>\n                <button onClick={this.onAddItemClick}>Add</button>\n\n\n            </div>\n\n        );\n    }\n}\n\nexport default AddNewItemForm;\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './App.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons'\n\n\nclass TodoListTask extends React.Component {\n    state = {\n        isEditMode: false,\n        priority: ['high', 'medium', 'low']\n    }\n    activatedEditMode = () => {\n        this.setState({\n            isEditMode: true\n        })\n\n    }\n\n    deActivatedEditMode = () => {\n        this.setState({\n            isEditMode: false\n        })\n\n    }\n\n\n    onIsDoneChanged = (e) => {\n       this.props.changeStatus(this.props.task.id, e.currentTarget.checked)\n    }\n\n    onIsTitleChange = (e) => {\n        this.props.changeTitle(this.props.task.id, e.currentTarget.value)\n    }\n    isTaskDeleted = () => {\n        this.props.deleteTask(this.props.task.id);\n    }\n\n    onIsPriorityChanged = (e) => {\n        this.props.changePriority(this.props.task.id,e.currentTarget.value)\n\n    }\n\n\n\n    render = () => {\n        let checked = this.props.task.isDone === true ? 'done' : ''\n        return (\n            <div className= {`todoList-task + ${checked}`}>\n                <input type=\"checkbox\" checked={this.props.task.isDone} onChange={this.onIsDoneChanged}/>\n                {this.state.isEditMode ? <input onChange={this.onIsTitleChange} value={this.props.task.title} autoFocus={true}\n                                                onBlur={this.deActivatedEditMode}/> : <span onDoubleClick={this.activatedEditMode}>\n                    {this.props.task.id} - {this.props.task.title}</span>\n                }\n                 ,\n                {/*<span>priority: {this.props.task.priority}</span>*/}\n\n                <span > priority:\n                        <select onChange={this.onIsPriorityChanged} value={this.props.task.priority}>\n                            <option value={this.state.priority[0]} >{this.state.priority[0]}</option>\n                            <option value={this.state.priority[1]} >{this.state.priority[1]}</option>\n                            <option value={this.state.priority[2]}>{this.state.priority[2]}</option>\n                        </select>\n                    {/*{this.props.task.priority}*/}\n                    </span>\n                <span onClick={this.isTaskDeleted}> <FontAwesomeIcon className='times' icon={faTimes}/> </span>\n            </div>\n        );\n    }\n}\nTodoListTask.propTypes = {\n    title: PropTypes.string,\n    isDone: PropTypes.bool,\n    priority: PropTypes.string\n}\n\nexport default TodoListTask;\n\n\n\n\n\n","import React from 'react';\nimport './App.css';\nimport TodoListTask from \"./TodoListTask\";\nimport PropTypes from 'prop-types';\n\nclass TodoListTasks extends React.Component {\n\n    render = () => {\n        let taskElement = this.props.tasks.map(task =>\n            <TodoListTask key={task.id} changePriority={this.props.changePriority}\n                          deleteTask={this.props.deleteTask} changeTitle={this.props.changeTitle} task={task} changeStatus={this.props.changeStatus} />);\n\n\n        return (\n            <div className=\"todoList-tasks\">\n                {taskElement}\n            </div>\n\n        );\n    }\n}\nTodoListTasks.propTypes = {\n    tasks: PropTypes.array\n\n}\n\nexport default TodoListTasks;\n\n","import React from 'react';\nimport './App.css';\nimport PropTypes from 'prop-types';\n\nclass TodoListFooter extends React.Component {\n    state = {\n        isHidden: false\n    }\n\n\n\n    onAllFilterClick = () => {this.props.changeFilter(\"All\")}\n    onCompletedFilterClick = () => {this.props.changeFilter(\"Completed\")}\n    onActiveFilterClick = () => {this.props.changeFilter(\"Active\")}\n    onShowFiltersClick = () => {\n        this.setState({isHidden: false})\n\n    }\n    onHideFiltersClick = () => {\n        this.setState({isHidden: true})\n    }\n\n\n\n    render = () => {\n        let classForAll = this.props.filerValue === \"All\" ? \"filter-active\" : \"\";\n        let classForCompleted = this.props.filerValue === \"Completed\" ? \"filter-active\" : \"\";\n        let classForActive = this.props.filerValue === \"Active\" ? \"filter-active\" : \"\";\n\n\n        return (\n            <div className=\"todoList-footer\">\n                { !this.state.isHidden && <div>\n                <button onClick={this.onAllFilterClick} className={classForAll}>All</button>\n                <button onClick={this.onCompletedFilterClick} className={classForCompleted}>Completed</button>\n                <button onClick={this.onActiveFilterClick} className={classForActive}>Active</button>\n            </div>}\n\n\n                {!this.state.isHidden && <span onClick={this.onHideFiltersClick}>hide</span>}\n                {this.state.isHidden && <span onClick={this.onShowFiltersClick}>show</span>}\n        </div>\n\n        );\n    }\n}\nTodoListFooter.propTypes = {\n    filterValue: PropTypes.string\n}\n\nexport default TodoListFooter;\n\n","import React from 'react';\nimport './App.css';\n\nclass TodoListTitle extends React.Component {\n\n\n\n\n    render = () => {\n\n\n        return (\n            <div className=\"todoList-title\">\n                <h3 className=\"todoList-title__title\">{this.props.title}</h3>\n            </div>\n        );\n    }\n}\n\nexport default TodoListTitle;\n\n","import React from 'react';\nimport './App.css';\nimport AddNewItemForm from \"./AddNewItemForm\";\nimport TodoListTasks from \"./TodoListTasks\";\nimport TodoListFooter from \"./TodoListFooter\";\nimport TodoListTitle from \"./TodoListTitle\";\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faTimes} from '@fortawesome/free-solid-svg-icons'\nimport {connect} from \"react-redux\";\n\nclass TodoList extends React.Component {\n\n\n    state = {\n        tasks: [\n            // {id: 0, title: \"JS\", isDone: true, priority: \"high\"},\n            // {id: 1,title: \"HTML\", isDone: false, priority: \"low\"},\n            // {id: 2,title: \"CSS\", isDone: false, priority: \"medium\"},\n            // {id: 3,title: \"React\", isDone: true, priority: \"high\"}\n        ],\n\n        filterValue: \"All\"\n    };\n    nextTaskId = 0;\n    saveState = () => {\n        let stateAsString = JSON.stringify(this.state);\n        localStorage.setItem('state-' + this.props.id, stateAsString)\n\n    }\n    restoreState = () => {\n        let state = {\n            tasks: [],\n            filterValue: 'All'\n        };\n        let stateAsString = localStorage.getItem('state-' + this.props.id);\n        if (stateAsString) {\n            state = JSON.parse(stateAsString);\n        }\n        this.setState(state, () => {\n            this.state.tasks.forEach(t => {\n                    if (t.id >= this.nextTaskId) {\n                        this.nextTaskId = t.id + 1\n                    }\n                }\n            )\n        })\n    }\n\n    componentDidMount() {\n        this.restoreState();\n    }\n\n    addTask = (newTitle) => {\n\n        let newTask = {\n            id: this.nextTaskId,\n            title: newTitle,\n            isDone: false,\n            priority: \"\"\n        };\n        this.nextTaskId++;\n        // let newTasks = [...this.state.tasks, newTask];\n        //\n        // this.setState({\n        //     tasks: newTasks\n        // }, this.saveState);\n\n        this.props.addTask(this.props.id, newTask);\n\n    }\n\n    deleteTask = (taskId) => {\n        // let newTasks = this.props.tasks.filter(t => {\n        //     return t.id !== taskId;\n        // });\n        // this.setState({\n        //     tasks: newTasks\n        // }, this.saveState);\n\n        this.props.deleteTask(this.props.id, taskId)\n\n    }\n\n\n    changeFilter = (newFilterValue) => {\n        this.setState({\n            filterValue: newFilterValue\n        });\n    }\n\n    changeTask = (taskId, obj) => {\n        // let newTasks = this.state.tasks.map(t => {\n        //     if (t.id !== taskId) {\n        //         return t;\n        //     } else {\n        //         return {...t, ...obj};\n        //     }\n        // });\n        // this.setState({\n        //     tasks: newTasks\n        // }, this.saveState);\n\n        this.props.changeTask (this.props.id,taskId, obj )\n    }\n\n    changeStatus = (taskId, isDone) => {\n        this.changeTask(taskId, {isDone: isDone})\n\n    }\n\n    changeTitle = (taskId, title) => {\n        this.changeTask(taskId, {title: title})\n\n    }\n\n    changePriority = (taskId, priority) => {\n        this.changeTask(taskId, {priority: priority})\n    }\n\n    isTodoListDeleted = () => {\n        this.props.deleteTodoList(this.props.id);\n    }\n\n\n\n    render = () => {\n        let filteredTasks = this.props.tasks.filter(t => {\n            switch (this.state.filterValue) {\n                case \"Active\":\n                    return t.isDone === false;\n                case \"Completed\":\n                    return t.isDone === true;\n                case \"All\":\n                    return true;\n\n                default:\n                    return true;\n\n            }\n        })\n\n        return (\n\n            <div className=\"todoList\">\n                <TodoListTitle title={this.props.title}/> <span onClick={this.isTodoListDeleted}> <FontAwesomeIcon\n                className='times-header' icon={faTimes}/></span>\n                <AddNewItemForm title={this.props.title} addItem={this.addTask}/>\n                <TodoListTasks changePriority={this.changePriority}\n                               deleteTask={this.deleteTask} changeTitle={this.changeTitle} tasks={filteredTasks}\n                               changeStatus={this.changeStatus}/>\n                <TodoListFooter filerValue={this.state.filterValue} changeFilter={this.changeFilter}/>\n\n\n            </div>\n        );\n    }\n}\n\n\n// const mapStateToProps = (state) => {\n//     return {\n//         tasks: state.todolists.tasks\n//     }\n// }\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        addTask: (todolistId, newTask) => {\n            let action = {\n                type: 'ADD_TASK',\n                newTask,\n                todolistId\n\n            }\n\n            dispatch(action)\n        },\n        changeTask: (todolistId, taskId, obj ) => {\n            let action = {\n                type: 'CHANGE_TASK',\n                todolistId,\n                taskId,\n                obj\n\n            }\n\n            dispatch(action)\n        },\n        deleteTask: (todolistId, taskId) => {\n            let action = {\n                type: 'DELETE_TASK',\n                todolistId,\n                taskId\n\n            }\n\n            dispatch(action)\n        }\n    }\n}\n\nconst ConnectedTodoList = connect(null, mapDispatchToProps)(TodoList)\n\nexport default ConnectedTodoList;\n\n","import React from 'react';\nimport './App.css';\nimport PropTypes from 'prop-types';\nimport TodoList from \"./TodoList\";\n\nimport TodoListTitle from \"./TodoListTitle\";\nimport AddNewItemForm from \"./AddNewItemForm\";\nimport {connect} from \"react-redux\";\n\nclass App extends React.Component {\n    state = {\n        todolists: [\n            // {id:1, title:'What to learn?'},\n            // {id:2, title:'Week tasks'},\n            // {id:3, title:'Year tasks'}\n        ]\n    }\n\n    nextTodoListId = 0;\n    saveState = () => {\n        let stateAsString = JSON.stringify(this.state);\n        localStorage.setItem('todolists', stateAsString)\n\n    }\n    restoreState = () => {\n        let state = {\n            todolists: []\n        };\n        let stateAsString = localStorage.getItem('todolists');\n        if (stateAsString) {\n            state = JSON.parse(stateAsString);\n        }\n        this.setState(state, () => {\n            this.state.todolists.forEach(t => {\n                    if (t.id >= this.nextTodoListId) {\n                        this.nextTodoListId = t.id + 1\n                    }\n                }\n            )\n        })\n    }\n\n    componentDidMount() {\n        this.restoreState();\n    }\n\n    addTodoList = (title) => {\n        let newTodoList = {\n            id: this.nextTodoListId,\n            title: title,\n            tasks: []\n        }\n        this.nextTodoListId++;\n        // let newTodoList = [...this.state.todolists, todoList];\n        // this.setState({\n        //     todolists: newTodoList\n        // },this.saveState)\n        this.props.createTodolist(newTodoList)\n\n    }\n\n    deleteTodoList = (todolistId) => {\n\n        // let newTodoList = this.props.todolists.filter(t => {\n        //     return t.id !== todolistId;\n        // });\n\n        this.props.deleteTodolist(todolistId)\n        // this.setState({\n        //     todolists: newTodoList\n        // }, this.saveState);\n\n\n    }\n\n    render = () => {\n        const todolist = this.props.todolists.map(tl => <TodoList key={tl.id} tasks={tl.tasks}\n                                                                  deleteTodoList={this.deleteTodoList} id={tl.id}\n                                                                  title={tl.title}/>)\n\n        return (<div>\n                <AddNewItemForm addItem={this.addTodoList}/>\n                <div className=\"App\">\n                    {todolist}\n\n                </div>\n            </div>\n        )\n\n\n    }\n}\n\n\nconst mapStateToProps = (state) => {\n    return {\n        todolists: state.todolists\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        createTodolist: (newTodoList) => {\n            let action = {\n                type: 'ADD_TODOLIST',\n                newTodoList: newTodoList\n\n            }\n            dispatch(action)\n\n        },\n        deleteTodolist: (todolistId) => {\n            let action = {\n                type: 'DELETE_TODOLIST',\n                 todolistId\n\n            }\n            dispatch(action)\n        }\n    }\n}\n\nconst ConnectedApp = connect(mapStateToProps, mapDispatchToProps)(App);\nexport default ConnectedApp;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\r\nimport {createStore} from \"redux\";\r\n\r\nconst initialState = {\r\n    todolists: [\r\n        // {id: 0,title: 'every day',tasks: [{id:0, title: 'css', isDone: false},{id:1, title: 'css', isDone: false},{id:2, title: 'css', isDone: false}]},\r\n        // {id: 1,title: 'every day',tasks: [{id:0, title: 'css', isDone: false},{id:1, title: 'css', isDone: false}]},\r\n        // {id: 2,title: 'every day',tasks: [{id:0, title: 'css', isDone: false}]}\r\n        ]\r\n}\r\n\r\n\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'ADD_TODOLIST':\r\n            return {\r\n                ...state,\r\n                todolists: [...state.todolists, action.newTodoList]\r\n            }\r\n        case 'ADD_TASK': {\r\n\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {...tl, tasks: [...tl.tasks, action.newTask]}\r\n                    } else {\r\n                            return tl\r\n\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        case 'DELETE_TASK': {\r\n\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {...tl, tasks: [...tl.tasks.filter(task => task.id !== action.taskId)]}\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        case 'CHANGE_TASK': {\r\n\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {...tl, tasks: [...tl.tasks.map(task => {\r\n                            if (task.id === action.taskId ) {\r\n                                return {\r\n                                    ...task, ...action.obj\r\n                                }\r\n                            } else {\r\n                                return task;\r\n                            }\r\n                            })]}\r\n                    } else {\r\n                        return tl\r\n\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        case 'DELETE_TODOLIST': {\r\n\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.filter(tl => {return tl.id !== action.todolistId}\r\n                )\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nconst store = createStore(reducer);\r\nexport default store;\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(<Provider store={store}>\n    <App/>\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}