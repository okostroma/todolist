{"version":3,"sources":["AddNewItemForm.tsx","TodoListTask.js","TodoListTasks.js","TodoListFooter.js","TodoListTitle.js","api.ts","reducer.ts","TodoList.js","App.tsx","serviceWorker.js","store.ts","index.js"],"names":["AddNewItemForm","state","error","title","onAddItemClick","newTitle","_this","trim","setState","props","addItem","onTitleChanged","e","currentTarget","value","onKeyPress","key","render","react_default","a","createElement","className","TextField","variant","onChange","type","label","IconButton","color","onClick","AddBox","React","Component","TodoListTask","isEditMode","task","activatedEditMode","deActivatedEditMode","changeTitle","onIsDoneChanged","changeStatus","checked","onIsTitleChange","isTaskDeleted","deleteTask","id","onIsPriorityChanged","changePriority","items","priority","map","item","status","priorityInt","concat","Checkbox","autoFocus","onBlur","onDoubleClick","index_es","icon","faTimes","TodoListTasks","taskElement","tasks","src_TodoListTask","TodoListFooter","isHidden","onAllFilterClick","changeFilter","onCompletedFilterClick","onActiveFilterClick","onShowFiltersClick","onHideFiltersClick","classForAll","filerValue","classForCompleted","classForActive","Button","TodoListTitle","changeTodoListTitle","instance","axios","create","withCredentials","baseURL","headers","API-KEY","todoListAPI","get","then","response","data","post","todolistId","delete","taskId","put","todoListTitle","ADD_TASK","initialState","todolists","reducer","arguments","length","undefined","action","Object","objectSpread2","toConsumableArray","newTodoList","t","tl","newTask","filter","todoListId","todolist","TodoList","filterValue","nextTaskId","saveState","stateAsString","JSON","stringify","localStorage","setItem","restoreState","getTasks","addTask","postTask","delTask","newFilterValue","changeTask","putTask","isTodoListDeleted","deleteTodoList","_this$props$tasks","filteredTasks","src_TodoListTitle","src_AddNewItemForm","src_TodoListTasks","src_TodoListFooter","this","ConnectedTodoList","connect","dispatch","resultCode","setTasks","App","getList","addTodoList","addList","deleteList","changeListTitle","Grid","Paper","style","padding","src_TodoList","AppBar","position","Toolbar","edge","aria-label","Typography","Container","fixed","container","spacing","ConnectedApp","todolistReducer","newTodoListTitle","Boolean","window","location","hostname","match","reducers","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9c13966f.chunk.js","sourcesContent":["import React, {ChangeEvent} from 'react';\nimport './App.css';\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport {AddBox} from '@material-ui/icons';\n\n\ntype OunPropsType = {\n    addItem: (newTitle: string) => void\n}\n\ntype StateType = {\n    error: boolean\n    title: string\n}\n\nclass AddNewItemForm extends React.Component<OunPropsType, StateType> {\n\n\n    state: StateType = {\n        error: false,\n        title: ''\n    }\n\n    onAddItemClick = () => {\n        let newTitle = this.state.title.trim();\n        if (newTitle === '') {\n            this.setState({error: true})\n        } else {\n            this.setState({title: '', error: false})\n            this.props.addItem(newTitle)\n        }\n\n    }\n    onTitleChanged = (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        this.setState({\n            error: false,\n            title: e.currentTarget.value\n        })\n    }\n    onKeyPress = (e: React.KeyboardEvent<HTMLDivElement>) => {\n        if (e.key === 'Enter') {\n            this.onAddItemClick();\n        }\n\n    }\n\n    render = () => {\n        let error = this.state.error ? 'error' : ''\n        return (\n\n\n            <div className=\"todoList-newTaskForm\">\n\n\n                <TextField variant='outlined'\n                           error={!!error}\n                       value={this.state.title} onChange={this.onTitleChanged}\n                       onKeyPress={this.onKeyPress}\n                       type=\"text\" label=\"title\"/>\n                {/*<button onClick={this.onAddItemClick}>Add</button>*/}\n                <IconButton color='primary' onClick={this.onAddItemClick}><AddBox /></IconButton>\n\n\n            </div>\n\n        );\n    }\n}\n\nexport default AddNewItemForm;\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './App.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons'\nimport TextField from \"@material-ui/core/TextField\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\n\n\nclass TodoListTask extends React.Component {\n    state = {\n        isEditMode: false,\n        title: this.props.task.title\n    }\n    activatedEditMode = () => {\n        this.setState({\n            isEditMode: true\n        })\n\n    }\n\n    deActivatedEditMode = () => {\n        this.setState({\n            isEditMode: false\n        })\n        this.props.changeTitle(this.props.task, this.state.title)\n\n    }\n\n\n    onIsDoneChanged = (e) => {\n       this.props.changeStatus(this.props.task, e.currentTarget.checked)\n    }\n\n    onIsTitleChange = (e) => {\n        this.setState(({title:e.currentTarget.value }))\n    }\n    isTaskDeleted = () => {\n        this.props.deleteTask(this.props.task.id);\n    }\n\n    onIsPriorityChanged = (e) => {\n        this.props.changePriority(this.props.task, e.currentTarget.value)\n\n    }\n\n\n\n    render = () => {\n        const priority = [{id: 0, priority: 'high'}, {id: 1, priority: 'medium'}, {id: 2, priority: 'low'}];\n        let items = priority.map(item => <option key={item.id} value={item.priority}> {item.priority} </option>)\n        let status = this.props.task.status;\n        let checked = status === 2 ? 'done' : ''\n        let priorityInt = this.props.task.priority\n        return (\n            <div className= {`todoList-task + ${checked}`}>\n                <Checkbox color=\"primary\" checked={status === 2} onChange={this.onIsDoneChanged}/>\n                {this.state.isEditMode ? <TextField  onChange={this.onIsTitleChange} value={this.state.title} autoFocus={true}\n                                                onBlur={this.deActivatedEditMode}/> : <span onDoubleClick={this.activatedEditMode}>\n                   {this.props.task.title}</span>\n                }\n                 ,\n                {/*<span>priority: {this.props.task.priority}</span>*/}\n\n                <span > priority:\n                        <select onChange={this.onIsPriorityChanged} value={priorityInt === 2 ? 'high' : priorityInt === 1 ? 'medium' : 'low' }>\n                            {/*<option value={this.state.priority[0]} >{this.state.priority[0]}</option>*/}\n                            {/*<option value={this.state.priority[1]} >{this.state.priority[1]}</option>*/}\n                            {/*<option value={this.state.priority[2]}>{this.state.priority[2]}</option>*/}\n\n                            {items}\n                        </select>\n                    {/*{this.props.task.priority}*/}\n                    </span>\n                <span onClick={this.isTaskDeleted}> <FontAwesomeIcon className='times' icon={faTimes}/> </span>\n            </div>\n        );\n    }\n}\n\n\nexport default TodoListTask;\n\n\n\n\n\n","import React from 'react';\nimport './App.css';\nimport TodoListTask from \"./TodoListTask\";\nimport PropTypes from 'prop-types';\n\nclass TodoListTasks extends React.Component {\n\n    render = () => {\n        let taskElement = this.props.tasks.map(task =>\n            <TodoListTask key={task.id} changePriority={this.props.changePriority}\n                          deleteTask={this.props.deleteTask} changeTitle={this.props.changeTitle} task={task} changeStatus={this.props.changeStatus} />);\n\n\n        return (\n            <div className=\"todoList-tasks\">\n                {taskElement}\n            </div>\n\n        );\n    }\n}\n\n\nexport default TodoListTasks;\n\n","import React from 'react';\nimport './App.css';\nimport PropTypes from 'prop-types';\nimport Button from \"@material-ui/core/Button\";\n\nclass TodoListFooter extends React.Component {\n    state = {\n        isHidden: false\n    }\n\n\n\n    onAllFilterClick = () => {\n        this.props.changeFilter(\"All\")}\n    onCompletedFilterClick = () => {this.props.changeFilter(\"Completed\")}\n    onActiveFilterClick = () => {this.props.changeFilter(\"Active\")}\n    onShowFiltersClick = () => {\n        this.setState({isHidden: false})\n\n    }\n    onHideFiltersClick = () => {\n        this.setState({isHidden: true})\n    }\n\n\n\n    render = () => {\n        let classForAll = this.props.filerValue === \"All\" ? \"contained\" : \"\";\n        let classForCompleted = this.props.filerValue === \"Completed\" ? \"contained\" : \"\";\n        let classForActive = this.props.filerValue === \"Active\" ? \"contained\" : \"\";\n\n\n        return (\n            <div className=\"todoList-footer\">\n                { !this.state.isHidden && <div>\n                <Button color='default'  onClick={this.onAllFilterClick} variant={classForAll}>All</Button>\n                <Button color='primary'  onClick={this.onCompletedFilterClick} variant={classForCompleted}>Completed</Button>\n                <Button color='secondary' onClick={this.onActiveFilterClick} variant={classForActive}>Active</Button>\n            </div>}\n\n\n                {!this.state.isHidden && <span onClick={this.onHideFiltersClick}>hide</span>}\n                {this.state.isHidden && <span onClick={this.onShowFiltersClick}>show</span>}\n        </div>\n\n        );\n    }\n}\nTodoListFooter.propTypes = {\n    filterValue: PropTypes.string\n}\n\nexport default TodoListFooter;\n\n","import React from 'react';\nimport './App.css';\nimport TextField from \"@material-ui/core/TextField\";\n\nclass TodoListTitle extends React.Component {\n\n    state = {\n        isEditMode: false,\n        title: this.props.title\n    }\n\n    onIsTitleChange = (e) => {\n        this.setState({title: e.currentTarget.value})\n    }\n\n\n    activatedEditMode = () => {\n        this.setState({\n            isEditMode: true\n        })\n\n    }\n\n    deActivatedEditMode = () => {\n        this.setState({\n            isEditMode: false\n        })\n        this.props.changeTodoListTitle(this.props.id, this.state.title)\n\n    }\n\n\n    render = () => {\n\n\n        return (\n            <div className=\"todoList-title\">\n                {/*<h3 className=\"todoList-title__title\">{this.props.title}</h3>*/}\n                {this.state.isEditMode ?\n                    <TextField onChange={this.onIsTitleChange} value={this.state.title} autoFocus={true}\n                               onBlur={this.deActivatedEditMode}/> : <h3 onDoubleClick={this.activatedEditMode}>\n                        {this.state.title}</h3>\n                }\n            </div>\n        );\n    }\n}\n\nexport default TodoListTitle;\n\n","import axios from \"axios\";\r\nimport {TaskType, TodolistType, TodolistUpdateObject} from \"./types/entities\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    headers: {'API-KEY': '3a78ad39-64cd-41e2-9aea-6c18cb0677f6'}\r\n})\r\n\r\n\r\ntype CommonType<T> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data:  T\r\n}\r\n\r\n\r\ntype GetTasksType = {\r\n    items: Array<TaskType>\r\n    totalCount: number\r\n    error: string\r\n}\r\n\r\nexport const todoListAPI =  {\r\n    getTodoLists() {\r\n       return instance.get<Array<TodolistType>>(\"todo-lists\").then(response => response.data)\r\n    },\r\n    postTodoList(title: string) {\r\n        return instance.post<CommonType<{item: TodolistType}>>(\"todo-lists\", {title: title}).then(response => response.data)\r\n    },\r\n    deleteList(todolistId: string) {\r\n       return instance.delete<CommonType<{}>>(`todo-lists/${todolistId}`).then(response => response.data)\r\n    },\r\n    getTasks(todolistId: string){\r\n        return instance.get<GetTasksType>(`todo-lists/${todolistId}/tasks`).then(response => response.data)\r\n    },\r\n    postTask(todolistId: string, newTitle: string){\r\n        return instance.post<CommonType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: newTitle}).then(response => response.data)\r\n    },\r\n    delTask(todolistId: string, taskId: string){\r\n        return instance.delete<CommonType<{}>>(`todo-lists/${todolistId}/tasks/${taskId}`).then(response => response.data)\r\n    },\r\n    updateTask(todolistId: string,taskId: string,task: TaskType){\r\n        return instance.put<CommonType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks/${taskId}`,\r\n            task).then(response => response.data)\r\n    },\r\n    updateTodoList(todolistId: string, todoListTitle: string){\r\n        return instance.put<CommonType<{item: TodolistType}>>(`todo-lists/${todolistId}`, {title: todoListTitle}).then(response => response.data)\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import {todoListAPI} from \"./api\";\r\nimport {TodolistType, TodolistUpdateObject, TaskType} from \"./types/entities\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppStateType} from \"./store\";\r\nimport {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\n\r\nconst ADD_TODOLIST = 'TODOLIST/REDUCER/ADD_TODOLIST';\r\nconst ADD_TASK = 'TODOLIST/REDUCER/ADD_TASK';\r\nconst DELETE_TASK = 'TODOLIST/REDUCER/DELETE_TASK';\r\nconst CHANGE_TASK = 'TODOLIST/REDUCER/CHANGE_TASK';\r\nconst DELETE_TODOLIST = 'TODOLIST/REDUCER/DELETE_TODOLIST';\r\nconst SET_TODOLISTS = 'SET_TODOLISTS';\r\nconst SET_TASKS = 'SET_TASKS';\r\nconst CHANGE_TODOLIST_TITLE = 'CHANGE_TODOLIST_TITLE';\r\n\r\ntype initialStateType = {\r\n    todolists: Array<TodolistType>\r\n}\r\n\r\n\r\nconst initialState: initialStateType  = {\r\n    todolists: []\r\n}\r\nconst reducer = (state: initialStateType = initialState, action: ActionType) : initialStateType => {\r\n    switch (action.type) {\r\n        case ADD_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todolists: [...state.todolists, action.newTodoList]\r\n            }\r\n        case CHANGE_TODOLIST_TITLE: {\r\n            return {...state, todolists: state.todolists.map(t => {\r\n                if(t.id === action.todolistId) {\r\n                    return {...t, title: action.todoListTitle}\r\n                } else {\r\n                    return t\r\n                }\r\n                }) }\r\n        }\r\n        case ADD_TASK: {\r\n\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {...tl, tasks: [...tl.tasks, action.newTask]}\r\n                    } else {\r\n                        return tl\r\n\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        case DELETE_TASK: {\r\n\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {...tl, tasks: [...tl.tasks.filter(task => task.id !== action.taskId)]}\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        case CHANGE_TASK: {\r\n\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.task.todoListId) {\r\n                        return {\r\n                            ...tl, tasks: tl.tasks.map(task => {\r\n                                if (task.id === action.task.id) {\r\n                                    return action.task\r\n                                } else {\r\n                                    return task;\r\n                                }\r\n                            })\r\n                        }\r\n                    } else {\r\n                        return tl\r\n\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        case DELETE_TODOLIST: {\r\n\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.filter(tl => {\r\n                        return tl.id !== action.todolistId\r\n                    }\r\n                )\r\n            }\r\n        }\r\n        case SET_TODOLISTS: {\r\n            return {\r\n                ...state, todolists: action.todolists.map(todolist => {\r\n                    return {...todolist, tasks: []}\r\n                })\r\n            }\r\n        }\r\n        case SET_TASKS: {\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {...tl, tasks: action.tasks}\r\n                    } else {\r\n                        return tl\r\n\r\n                    }\r\n                })\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state;\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\ntype ActionType = addTodoListType | newTodoListTitleType | deleteTodoListType | addTaskType | changeTaskType | deleteTaskType | setTodoListsType | setTasksType ;\r\n\r\ntype addTodoListType = {\r\n    type: typeof ADD_TODOLIST\r\n    newTodoList: TodolistType\r\n}\r\n\r\nexport const addTodoList = (newTodoList: TodolistType) : addTodoListType  => ({\r\n    type: ADD_TODOLIST,\r\n    newTodoList: newTodoList\r\n})\r\n\r\ntype newTodoListTitleType = {\r\n    type: typeof CHANGE_TODOLIST_TITLE\r\n    todolistId: string\r\n    todoListTitle: string\r\n}\r\n\r\nexport const newTodoListTitle = (todolistId: string,todoListTitle: string) : newTodoListTitleType => ({\r\n    type: CHANGE_TODOLIST_TITLE, todolistId,todoListTitle })\r\n\r\ntype deleteTodoListType = {\r\n    type: typeof DELETE_TODOLIST\r\n    todolistId: string\r\n}\r\n\r\nexport const deleteTodoList = (todolistId: string) : deleteTodoListType => ({\r\n    type: DELETE_TODOLIST,\r\n    todolistId: todolistId\r\n})\r\n\r\ntype addTaskType = {\r\n    type: typeof ADD_TASK\r\n    todolistId: string\r\n    newTask: TaskType\r\n}\r\n\r\nexport const addTask = (todolistId: string, newTask: TaskType) : addTaskType => ({\r\n    type: ADD_TASK,\r\n    newTask: newTask,\r\n    todolistId: todolistId\r\n})\r\n\r\ntype changeTaskType = {\r\n    type: typeof CHANGE_TASK\r\n    task: TaskType\r\n}\r\n\r\nexport const changeTask = (task: TaskType) : changeTaskType => ({\r\n    type: CHANGE_TASK,\r\n    task\r\n})\r\n\r\ntype deleteTaskType = {\r\n    type: typeof DELETE_TASK\r\n    todolistId:string\r\n    taskId: string\r\n}\r\n\r\nexport const deleteTask = (todolistId:string, taskId: string) : deleteTaskType => ({\r\n    type: DELETE_TASK,\r\n    todolistId: todolistId, taskId: taskId\r\n})\r\n\r\ntype setTodoListsType = {\r\n    type: typeof SET_TODOLISTS\r\n    todolists: Array<TodolistType>\r\n}\r\n\r\nexport const setTodoLists = (todolists: Array<TodolistType>) : setTodoListsType => ({\r\n    type: SET_TODOLISTS,\r\n    todolists: todolists\r\n})\r\n\r\ntype setTasksType = {\r\n    type: typeof SET_TASKS\r\n    todolistId: string\r\n    tasks: Array<TaskType>\r\n}\r\n\r\n\r\nexport const setTasks = (todolistId: string, tasks: Array<TaskType>) : setTasksType => ({\r\n    type: SET_TASKS,\r\n    todolistId, tasks\r\n})\r\n\r\n\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, ActionType>\r\ntype DispatchThunk = ThunkDispatch<AppStateType, unknown, ActionType>\r\n\r\nexport const getList = () :ThunkType  => {\r\n    return (dispatch: DispatchThunk) => {\r\n            todoListAPI.getTodoLists()\r\n                .then(data => {\r\n                    dispatch(setTodoLists(data));\r\n                });\r\n    }\r\n}\r\n\r\nexport const addList = (title: string) :ThunkType => {\r\n    return (dispatch: DispatchThunk)=> {\r\n        todoListAPI.postTodoList(title)\r\n            .then(data => {\r\n                let todolists = data.data.item;\r\n                dispatch(addTodoList(todolists));\r\n            });\r\n\r\n    }\r\n}\r\n\r\nexport const deleteList = (todolistId: string):ThunkType => {\r\n    return (dispatch: DispatchThunk) => {\r\n        todoListAPI.deleteList(todolistId)\r\n            .then(data => {\r\n                if (data.resultCode === 0) {\r\n                    dispatch(deleteTodoList(todolistId))\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const changeListTitle = (todolistId: string, todoListTitle: string):ThunkType => {\r\n    return (dispatch: DispatchThunk) => {\r\n        todoListAPI.updateTodoList(todolistId, todoListTitle).then(data => {\r\n            if (data.resultCode === 0) {\r\n                dispatch(newTodoListTitle(todolistId, todoListTitle))\r\n            }\r\n\r\n        })\r\n    }\r\n}\r\n\r\nexport const getTasks = (todolistId: string):ThunkType => {\r\n    return (dispatch:DispatchThunk) => {\r\n        todoListAPI.getTasks(todolistId)\r\n            .then(data => {\r\n                if (!data.error) {\r\n                    dispatch(setTasks(todolistId, data.items))\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const postTask = (todolistId: string,newTitle: string):ThunkType => {\r\n    return (dispatch:DispatchThunk) => {\r\n        todoListAPI.postTask(todolistId, newTitle)\r\n            .then(data => {\r\n                if (data.resultCode === 0) {\r\n                    dispatch(addTask(todolistId, data.data.item))\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n\r\nexport const delTask = (todolistId: string, taskId: string):ThunkType => {\r\n    return (dispatch:DispatchThunk) => {\r\n        todoListAPI.delTask(todolistId, taskId)\r\n            .then(data => {\r\n                if (data.resultCode === 0) {\r\n                    dispatch(deleteTask(todolistId, taskId))\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const putTask = (todolistId: string, taskId: string, task: TaskType):ThunkType => {\r\n    return (dispatch:DispatchThunk) => {\r\n        todoListAPI.updateTask(todolistId,taskId,task)\r\n            .then(data => {\r\n                if (data.resultCode === 0) {\r\n                    dispatch(changeTask(data.data.item))\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default reducer;\r\n\r\n\r\n","import React from 'react';\nimport './App.css';\nimport AddNewItemForm from \"./AddNewItemForm\";\nimport TodoListTasks from \"./TodoListTasks\";\nimport TodoListFooter from \"./TodoListFooter\";\nimport TodoListTitle from \"./TodoListTitle\";\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faTimes} from '@fortawesome/free-solid-svg-icons'\nimport {connect} from \"react-redux\";\nimport {delTask, getTasks, postTask, putTask} from \"./reducer\";\n\n\nclass TodoList extends React.Component {\n\n\n    state = {\n        tasks: [\n        ],\n\n        filterValue: \"All\"\n    };\n    nextTaskId = 0;\n    saveState = () => {\n        let stateAsString = JSON.stringify(this.state);\n        localStorage.setItem('state-' + this.props.id, stateAsString)\n\n    }\n    restoreState = () => {\n        // let state = {\n        //     tasks: [],\n        //     filterValue: 'All'\n        // };\n        // let stateAsString = localStorage.getItem('state-' + this.props.id);\n        // if (stateAsString) {\n        //     state = JSON.parse(stateAsString);\n        // }\n        // this.setState(state, () => {\n        //     this.state.tasks.forEach(t => {\n        //             if (t.id >= this.nextTaskId) {\n        //                 this.nextTaskId = t.id + 1\n        //             }\n        //         }\n        //     )\n        // })\n\n        // todoListAPI.getTasks(this.props.id)\n        //     .then(data => {\n        //         if (!data.error) {\n        //             this.props.setTasks(this.props.id, data.items)\n        //         }\n        //     });\n\n        this.props.getTasks(this.props.id)\n\n    }\n\n    componentDidMount() {\n        this.restoreState();\n    }\n\n    addTask = (newTitle) => {\n\n        // let newTask = {\n        //     id: this.nextTaskId,\n        //     title: newTitle,\n        //     isDone: false,\n        //     priority: \"\"\n        // };\n        // this.nextTaskId++;\n        // let newTasks = [...this.state.tasks, newTask];\n        //\n        // this.setState({\n        //     tasks: newTasks\n        // }, this.saveState);\n\n        // this.props.addTask(this.props.id, newTask);\n\n        // todoListAPI.postTask(this.props.id, newTitle)\n        //     .then(data => {\n        //         if (data.resultCode === 0) {\n        //             this.props.addTask(this.props.id, data.data.item)\n        //         }\n        //     });\n        this.props.postTask(this.props.id, newTitle)\n\n\n    }\n\n    deleteTask = (taskId) => {\n        // let newTasks = this.props.tasks.filter(t => {\n        //     return t.id !== taskId;\n        // });\n        // this.setState({\n        //     tasks: newTasks\n        // }, this.saveState);\n\n        // this.props.deleteTask(this.props.id, taskId)\n        // todoListAPI.delTask(this.props.id, taskId)\n        //     .then(data => {\n        //         if (data.resultCode === 0) {\n        //             this.props.deleteTask(this.props.id, taskId)\n        //         }\n        //     });\n\n        this.props.delTask(this.props.id, taskId)\n\n    }\n\n\n    changeFilter = (newFilterValue) => {\n        this.setState({\n            filterValue: newFilterValue\n        });\n    }\n\n    changeTask = (task) => {\n        debugger\n\n        // this.props.changeTask (this.props.id,taskId, obj )\n\n        // todoListAPI.updateTask(this.props.id,task.id,task)\n        //     .then(data => {\n        //         if (data.resultCode === 0) {\n        //             this.props.changeTask(data.data.item)\n        //         }\n        //     });\n\n        this.props.putTask(this.props.id,task.id,task)\n    }\n\n    changeStatus = (task, status) => {\n\n        this.changeTask({...task, status: status === true ? 2 : 0})\n\n    }\n\n    changeTitle = (task, title) => {\n\n        this.changeTask({...task, title: title})\n\n    }\n\n    changePriority = (task, priority) => {\n        this.changeTask({...task, priority: priority === 'high' ? 2 : priority === 'medium' ? 1 : 0 })\n    }\n\n    isTodoListDeleted = () => {\n        this.props.deleteTodoList(this.props.id);\n    }\n\n\n\n\n    render = () => {\n        let {tasks = []} = this.props;\n\n        let filteredTasks = tasks.filter(t => {\n            switch (this.state.filterValue) {\n                case \"Active\":\n                    return t.status === 0;\n                case \"Completed\":\n                    return t.status === 2;\n                case \"All\":\n                    return true;\n\n                default:\n                    return true;\n\n            }\n        })\n\n        return (\n\n            <div className=\"todoList\">\n                <TodoListTitle id={this.props.id} changeTodoListTitle={this.props.changeTodoListTitle} title={this.props.title}/>\n                <span onClick={this.isTodoListDeleted}> <FontAwesomeIcon\n                className='times-header' icon={faTimes}/></span>\n                <AddNewItemForm title={this.props.title} addItem={this.addTask}/>\n                <TodoListTasks changePriority={this.changePriority}\n                               deleteTask={this.deleteTask} changeTitle={this.changeTitle} tasks={filteredTasks}\n                               changeStatus={this.changeStatus}/>\n                <TodoListFooter filerValue={this.state.filterValue} changeFilter={this.changeFilter}/>\n\n\n            </div>\n        );\n    }\n}\n\n\n// const mapStateToProps = (state) => {\n//     return {\n//         tasks: state.todolists.tasks\n//     }\n// }\n\n\n\nconst ConnectedTodoList = connect(null, {\n    putTask,\n    delTask,\n    getTasks,\n    postTask\n})(TodoList)\n\nexport default ConnectedTodoList;\n\n","import React from 'react';\nimport './App.css';\nimport TodoList from \"./TodoList\";\nimport AddNewItemForm from \"./AddNewItemForm\";\nimport {connect} from \"react-redux\";\nimport {addList, changeListTitle, deleteList, getList,} from \"./reducer\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport Menu from \"@material-ui/core/Menu\";\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { AppStateType } from './store';\nimport {TodolistType} from \"./types/entities\";\n\ntype MapStateToPropsType = {\n    todolists: Array<TodolistType>\n}\n\ntype MapDispatchToPropsType = {\n    getList: () => void\n    addList: (title: string) => void\n    deleteList: (todolistId: string) => void\n    changeListTitle: (todolistId: string, todoListTitle: string) => void\n}\n\n\nclass App extends React.Component<MapStateToPropsType & MapDispatchToPropsType> {\n\n\n    restoreState = () => {\n\n        this.props.getList();\n    }\n\n    componentDidMount() {\n        this.restoreState();\n    }\n\n    addTodoList = (title: string) => {\n\n        this.props.addList(title)\n\n\n    }\n\n    deleteTodoList = (todolistId: string) => {\n\n        this.props.deleteList(todolistId)\n\n    }\n\n    changeTodoListTitle = (todolistId: string, todoListTitle: string) => {\n\n        this.props.changeListTitle(todolistId, todoListTitle)\n    }\n\n    render = () => {\n        const todolist = this.props.todolists.map(tl => <Grid item> <Paper style={{padding: '10px'}}> <TodoList\n            key={tl.id} tasks={tl.tasks}\n            deleteTodoList={this.deleteTodoList} id={tl.id}\n            title={tl.title} changeTodoListTitle={this.changeTodoListTitle}/> </Paper> </Grid>)\n\n        return (<div>\n                <AppBar position=\"static\">\n                    <Toolbar>\n                        <IconButton edge=\"start\" className='menuButton' color=\"inherit\" aria-label=\"menu\">\n                            {/*<Menu />*/}\n                        </IconButton>\n                        <Typography variant=\"h6\" className='title'>\n                            News\n                        </Typography>\n                        <Button color=\"inherit\">Login</Button>\n                    </Toolbar>\n                </AppBar>\n                <Container fixed>\n                    <Grid container style={{padding: '20px'}}>\n\n                        <AddNewItemForm addItem={this.addTodoList}/>\n                    </Grid>\n                    <Grid container spacing={3}>\n\n                        {todolist}\n\n                    </Grid>\n                </Container>\n            </div>\n        )\n\n\n    }\n}\n\n\nconst mapStateToProps = (state: AppStateType) : MapStateToPropsType  => {\n    return {\n        todolists: state.todolistReducer.todolists\n    }\n}\n\n\nconst ConnectedApp = connect<MapStateToPropsType, MapDispatchToPropsType, {} , AppStateType>(mapStateToProps, {\n    changeListTitle,\n    getList,\n    addList,\n    deleteList\n})(App);\nexport default ConnectedApp;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\r\nimport {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport reducer from \"./reducer\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst reducers = combineReducers({\r\n    todolistReducer: reducer\r\n})\r\n\r\ntype RedusersType = typeof reducers;\r\n\r\nexport type AppStateType = ReturnType<RedusersType>\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunk));\r\nexport default store;\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.tsx';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(<Provider store={store}>\n    <App/>\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}