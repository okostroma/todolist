{"version":3,"sources":["AddNewItemForm.js","TodoListTask.js","TodoListTasks.js","TodoListFooter.js","TodoListTitle.js","reducer.js","api.js","TodoList.js","App.js","serviceWorker.js","store.js","index.js"],"names":["AddNewItemForm","state","error","title","onAddItemClick","newTitle","_this","trim","setState","props","addItem","onTitleChanged","e","currentTarget","value","onKeyPress","key","render","react_default","a","createElement","className","TextField","variant","onChange","type","label","IconButton","color","onClick","AddBox","React","Component","TodoListTask","isEditMode","task","activatedEditMode","deActivatedEditMode","changeTitle","onIsDoneChanged","changeStatus","checked","onIsTitleChange","isTaskDeleted","deleteTask","id","onIsPriorityChanged","changePriority","items","priority","map","item","status","priorityInt","concat","Checkbox","autoFocus","onBlur","onDoubleClick","index_es","icon","faTimes","TodoListTasks","taskElement","tasks","src_TodoListTask","TodoListFooter","isHidden","onAllFilterClick","changeFilter","onCompletedFilterClick","onActiveFilterClick","onShowFiltersClick","onHideFiltersClick","classForAll","filerValue","classForCompleted","classForActive","Button","TodoListTitle","ADD_TASK","initialState","todolists","reducer","arguments","length","undefined","action","Object","objectSpread2","toConsumableArray","newTodoList","tl","todolistId","newTask","filter","taskId","todoListId","todolist","instance","axios","withCredentials","baseURL","headers","API-KEY","todoListAPI","getTodoLists","get","then","response","data","postTodoList","post","deleteList","delete","getTasks","postTask","delTask","updateTask","put","TodoList","filterValue","nextTaskId","saveState","stateAsString","JSON","stringify","localStorage","setItem","restoreState","setTasks","addTask","resultCode","newFilterValue","changeTask","isTodoListDeleted","deleteTodoList","_this$props$tasks","filteredTasks","t","src_TodoListTitle","src_AddNewItemForm","src_TodoListTasks","src_TodoListFooter","this","ConnectedTodoList","connect","dispatch","addTaskActionCreator","changeTaskActionCreator","deleteTaskActionCreator","setTasksActionCreator","App","nextTodoListId","setTodoLists","addTodoList","createTodolist","deleteTodolist","Grid","Paper","style","padding","src_TodoList","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","container","spacing","ConnectedApp","addTodoListActionCreator","deleteTodoListActionCreator","setTodoListsActionCreator","Boolean","window","location","hostname","match","store","createStore","ReactDOM","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.34268254.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport {AddBox} from '@material-ui/icons';\n\n\nclass AddNewItemForm extends React.Component {\n\n\n    state = {\n        error: false,\n        title: ''\n    }\n\n    onAddItemClick = () => {\n        let newTitle = this.state.title.trim();\n        if (newTitle === '') {\n            this.setState({error: true})\n        } else {\n            this.setState({title: '', error: false})\n            this.props.addItem(newTitle)\n        }\n\n    }\n    onTitleChanged = (e) => {\n        this.setState({\n            error: false,\n            title: e.currentTarget.value\n        })\n    }\n    onKeyPress = (e) => {\n        if (e.key === 'Enter') {\n            this.onAddItemClick();\n        }\n\n    }\n\n    render = () => {\n        let error = this.state.error === true ? 'error' : ''\n        return (\n\n\n            <div className=\"todoList-newTaskForm\">\n\n\n                <TextField variant='outlined'\n                           error={!!error}\n                       value={this.state.title} onChange={this.onTitleChanged}\n                       onKeyPress={this.onKeyPress}\n                       type=\"text\" label=\"title\"/>\n                {/*<button onClick={this.onAddItemClick}>Add</button>*/}\n                <IconButton color='primary' onClick={this.onAddItemClick}><AddBox /></IconButton>\n\n\n            </div>\n\n        );\n    }\n}\n\nexport default AddNewItemForm;\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './App.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons'\nimport TextField from \"@material-ui/core/TextField\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\n\n\nclass TodoListTask extends React.Component {\n    state = {\n        isEditMode: false,\n        title: this.props.task.title\n    }\n    activatedEditMode = () => {\n        this.setState({\n            isEditMode: true\n        })\n\n    }\n\n    deActivatedEditMode = () => {\n        this.setState({\n            isEditMode: false\n        })\n        this.props.changeTitle(this.props.task, this.state.title)\n\n    }\n\n\n    onIsDoneChanged = (e) => {\n       this.props.changeStatus(this.props.task, e.currentTarget.checked)\n    }\n\n    onIsTitleChange = (e) => {\n        this.setState(({title:e.currentTarget.value }))\n    }\n    isTaskDeleted = () => {\n        this.props.deleteTask(this.props.task.id);\n    }\n\n    onIsPriorityChanged = (e) => {\n        debugger\n        this.props.changePriority(this.props.task, e.currentTarget.value)\n\n    }\n\n\n\n    render = () => {\n        const priority = [{id: 0, priority: 'high'}, {id: 1, priority: 'medium'}, {id: 2, priority: 'low'}];\n        let items = priority.map(item => <option key={item.id} value={item.priority}> {item.priority} </option>)\n        let status = this.props.task.status;\n        let checked = status === 2 ? 'done' : ''\n        let priorityInt = this.props.task.priority\n        return (\n            <div className= {`todoList-task + ${checked}`}>\n                <Checkbox color=\"primary\" checked={status === 2} onChange={this.onIsDoneChanged}/>\n                {this.state.isEditMode ? <TextField  onChange={this.onIsTitleChange} value={this.state.title} autoFocus={true}\n                                                onBlur={this.deActivatedEditMode}/> : <span onDoubleClick={this.activatedEditMode}>\n                   {this.props.task.title}</span>\n                }\n                 ,\n                {/*<span>priority: {this.props.task.priority}</span>*/}\n\n                <span > priority:\n                        <select onChange={this.onIsPriorityChanged} value={priorityInt === 2 ? 'high' : priorityInt === 1 ? 'medium' : 'low' }>\n                            {/*<option value={this.state.priority[0]} >{this.state.priority[0]}</option>*/}\n                            {/*<option value={this.state.priority[1]} >{this.state.priority[1]}</option>*/}\n                            {/*<option value={this.state.priority[2]}>{this.state.priority[2]}</option>*/}\n\n                            {items}\n                        </select>\n                    {/*{this.props.task.priority}*/}\n                    </span>\n                <span onClick={this.isTaskDeleted}> <FontAwesomeIcon className='times' icon={faTimes}/> </span>\n            </div>\n        );\n    }\n}\nTodoListTask.propTypes = {\n    title: PropTypes.string,\n    isDone: PropTypes.bool,\n    priority: PropTypes.string\n}\n\nexport default TodoListTask;\n\n\n\n\n\n","import React from 'react';\nimport './App.css';\nimport TodoListTask from \"./TodoListTask\";\nimport PropTypes from 'prop-types';\n\nclass TodoListTasks extends React.Component {\n\n    render = () => {\n        let taskElement = this.props.tasks.map(task =>\n            <TodoListTask key={task.id} changePriority={this.props.changePriority}\n                          deleteTask={this.props.deleteTask} changeTitle={this.props.changeTitle} task={task} changeStatus={this.props.changeStatus} />);\n\n\n        return (\n            <div className=\"todoList-tasks\">\n                {taskElement}\n            </div>\n\n        );\n    }\n}\nTodoListTasks.propTypes = {\n    tasks: PropTypes.array\n\n}\n\nexport default TodoListTasks;\n\n","import React from 'react';\nimport './App.css';\nimport PropTypes from 'prop-types';\nimport Button from \"@material-ui/core/Button\";\n\nclass TodoListFooter extends React.Component {\n    state = {\n        isHidden: false\n    }\n\n\n\n    onAllFilterClick = () => {\n        this.props.changeFilter(\"All\")}\n    onCompletedFilterClick = () => {this.props.changeFilter(\"Completed\")}\n    onActiveFilterClick = () => {this.props.changeFilter(\"Active\")}\n    onShowFiltersClick = () => {\n        this.setState({isHidden: false})\n\n    }\n    onHideFiltersClick = () => {\n        this.setState({isHidden: true})\n    }\n\n\n\n    render = () => {\n        let classForAll = this.props.filerValue === \"All\" ? \"contained\" : \"\";\n        let classForCompleted = this.props.filerValue === \"Completed\" ? \"contained\" : \"\";\n        let classForActive = this.props.filerValue === \"Active\" ? \"contained\" : \"\";\n\n\n        return (\n            <div className=\"todoList-footer\">\n                { !this.state.isHidden && <div>\n                <Button color='default'  onClick={this.onAllFilterClick} variant={classForAll}>All</Button>\n                <Button color='primary'  onClick={this.onCompletedFilterClick} variant={classForCompleted}>Completed</Button>\n                <Button color='secondary' onClick={this.onActiveFilterClick} variant={classForActive}>Active</Button>\n            </div>}\n\n\n                {!this.state.isHidden && <span onClick={this.onHideFiltersClick}>hide</span>}\n                {this.state.isHidden && <span onClick={this.onShowFiltersClick}>show</span>}\n        </div>\n\n        );\n    }\n}\nTodoListFooter.propTypes = {\n    filterValue: PropTypes.string\n}\n\nexport default TodoListFooter;\n\n","import React from 'react';\nimport './App.css';\n\nclass TodoListTitle extends React.Component {\n\n\n\n\n    render = () => {\n\n\n        return (\n            <div className=\"todoList-title\">\n                <h3 className=\"todoList-title__title\">{this.props.title}</h3>\n            </div>\n        );\n    }\n}\n\nexport default TodoListTitle;\n\n","const ADD_TODOLIST = 'TODOLIST/REDUCER/ADD_TODOLIST';\r\nconst ADD_TASK = 'TODOLIST/REDUCER/ADD_TASK';\r\nconst DELETE_TASK = 'TODOLIST/REDUCER/DELETE_TASK';\r\nconst CHANGE_TASK = 'TODOLIST/REDUCER/CHANGE_TASK';\r\nconst DELETE_TODOLIST = 'TODOLIST/REDUCER/DELETE_TODOLIST';\r\nconst SET_TODOLISTS = 'SET_TODOLISTS';\r\nconst SET_TASKS = 'SET_TASKS'\r\n\r\nconst initialState = {\r\n    todolists: [\r\n        // {id: 0,title: 'every day',tasks: [{id:0, title: 'css', isDone: false},{id:1, title: 'css', isDone: false},{id:2, title: 'css', isDone: false}]},\r\n        // {id: 1,title: 'every day',tasks: [{id:0, title: 'css', isDone: false},{id:1, title: 'css', isDone: false}]},\r\n        // {id: 2,title: 'every day',tasks: [{id:0, title: 'css', isDone: false}]}\r\n    ]\r\n}\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todolists: [...state.todolists, action.newTodoList]\r\n            }\r\n        case ADD_TASK: {\r\n\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {...tl, tasks: [...tl.tasks, action.newTask]}\r\n                    } else {\r\n                        return tl\r\n\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        case DELETE_TASK: {\r\n\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {...tl, tasks: [...tl.tasks.filter(task => task.id !== action.taskId)]}\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        case CHANGE_TASK: {\r\n            debugger\r\n\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.task.todoListId) {\r\n                        return {\r\n                            ...tl, tasks: tl.tasks.map(task => {\r\n                                if (task.id === action.task.id) {\r\n                                    return action.task\r\n                                } else {\r\n                                    return task;\r\n                                }\r\n                            })\r\n                        }\r\n                    } else {\r\n                        return tl\r\n\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        case DELETE_TODOLIST: {\r\n\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.filter(tl => {\r\n                        return tl.id !== action.todolistId\r\n                    }\r\n                )\r\n            }\r\n        }\r\n        case SET_TODOLISTS: {\r\n            return {\r\n                ...state, todolists: action.todolists.map(todolist => {\r\n                    return {...todolist, tasks: []}\r\n                })\r\n            }\r\n        }\r\n        case SET_TASKS: {\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {...tl, tasks: action.tasks}\r\n                    } else {\r\n                        return tl\r\n\r\n                    }\r\n                })\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state;\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\nexport const addTodoListActionCreator = (newTodoList) => ({\r\n    type: ADD_TODOLIST,\r\n    newTodoList: newTodoList\r\n})\r\n\r\nexport const deleteTodoListActionCreator = (todolistId) => ({\r\n    type: DELETE_TODOLIST,\r\n    todolistId: todolistId\r\n})\r\n\r\nexport const addTaskActionCreator = (todolistId, newTask) => ({\r\n    type: ADD_TASK,\r\n    newTask: newTask,\r\n    todolistId: todolistId\r\n})\r\n\r\nexport const changeTaskActionCreator = (task) => ({\r\n    type: CHANGE_TASK,\r\n    task\r\n})\r\n\r\nexport const deleteTaskActionCreator = (todolistId, taskId) => ({\r\n    type: DELETE_TASK,\r\n    todolistId: todolistId, taskId: taskId\r\n})\r\n\r\nexport const setTodoListsActionCreator = (todolists) => ({\r\n    type: SET_TODOLISTS,\r\n    todolists: todolists\r\n})\r\n\r\nexport const setTasksActionCreator = (todolistId, tasks) => ({\r\n    type: SET_TASKS,\r\n    todolistId, tasks\r\n})\r\n\r\nexport default reducer;\r\n\r\n\r\n","import * as axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    headers: {'API-KEY': '01dff12f-025a-426e-aee1-b5aaa1d81343'}\r\n})\r\n\r\n\r\nexport const todoListAPI =  {\r\n    getTodoLists() {\r\n       return instance.get(\"todo-lists\").then(response => response.data)\r\n    },\r\n    postTodoList(title) {\r\n        return instance.post(\"todo-lists\", {title: title}).then(response => response.data)\r\n    },\r\n    deleteList(todolistId) {\r\n       return instance.delete(`todo-lists/${todolistId}`).then(response => response.data)\r\n    },\r\n    getTasks(todolistId){\r\n        return instance.get(`todo-lists/${todolistId}/tasks`).then(response => response.data)\r\n    },\r\n    postTask(todolistId, newTitle){\r\n        return instance.post(`todo-lists/${todolistId}/tasks`, {title: newTitle}).then(response => response.data)\r\n    },\r\n    delTask(todolistId, taskId){\r\n        return instance.delete(`todo-lists/${todolistId}/tasks/${taskId}`).then(response => response.data)\r\n    },\r\n    updateTask(todolistId,taskId,task){\r\n        return instance.put(`todo-lists/${todolistId}/tasks/${taskId}`,\r\n            task).then(response => response.data)\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\nimport './App.css';\nimport AddNewItemForm from \"./AddNewItemForm\";\nimport TodoListTasks from \"./TodoListTasks\";\nimport TodoListFooter from \"./TodoListFooter\";\nimport TodoListTitle from \"./TodoListTitle\";\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faTimes} from '@fortawesome/free-solid-svg-icons'\nimport {connect} from \"react-redux\";\nimport {addTaskActionCreator, changeTaskActionCreator, deleteTaskActionCreator, setTasksActionCreator} from \"./reducer\";\nimport * as axios from \"axios\";\nimport {todoListAPI} from \"./api\";\n\nclass TodoList extends React.Component {\n\n\n    state = {\n        tasks: [\n        ],\n\n        filterValue: \"All\"\n    };\n    nextTaskId = 0;\n    saveState = () => {\n        let stateAsString = JSON.stringify(this.state);\n        localStorage.setItem('state-' + this.props.id, stateAsString)\n\n    }\n    restoreState = () => {\n        // let state = {\n        //     tasks: [],\n        //     filterValue: 'All'\n        // };\n        // let stateAsString = localStorage.getItem('state-' + this.props.id);\n        // if (stateAsString) {\n        //     state = JSON.parse(stateAsString);\n        // }\n        // this.setState(state, () => {\n        //     this.state.tasks.forEach(t => {\n        //             if (t.id >= this.nextTaskId) {\n        //                 this.nextTaskId = t.id + 1\n        //             }\n        //         }\n        //     )\n        // })\n\n        todoListAPI.getTasks(this.props.id)\n            .then(data => {\n                if (!data.error) {\n                    this.props.setTasks(this.props.id, data.items)\n                }\n            });\n\n    }\n\n    componentDidMount() {\n        this.restoreState();\n    }\n\n    addTask = (newTitle) => {\n\n        // let newTask = {\n        //     id: this.nextTaskId,\n        //     title: newTitle,\n        //     isDone: false,\n        //     priority: \"\"\n        // };\n        // this.nextTaskId++;\n        // let newTasks = [...this.state.tasks, newTask];\n        //\n        // this.setState({\n        //     tasks: newTasks\n        // }, this.saveState);\n\n        // this.props.addTask(this.props.id, newTask);\n\n        todoListAPI.postTask(this.props.id, newTitle)\n            .then(data => {\n                if (data.resultCode === 0) {\n                    this.props.addTask(this.props.id, data.data.item)\n                }\n            });\n\n\n    }\n\n    deleteTask = (taskId) => {\n        // let newTasks = this.props.tasks.filter(t => {\n        //     return t.id !== taskId;\n        // });\n        // this.setState({\n        //     tasks: newTasks\n        // }, this.saveState);\n\n        // this.props.deleteTask(this.props.id, taskId)\n        todoListAPI.delTask(this.props.id, taskId)\n            .then(data => {\n                if (data.resultCode === 0) {\n                    this.props.deleteTask(this.props.id, taskId)\n                }\n            });\n\n    }\n\n\n    changeFilter = (newFilterValue) => {\n        debugger\n        this.setState({\n            filterValue: newFilterValue\n        });\n    }\n\n    changeTask = (task) => {\n\n        debugger\n        // this.props.changeTask (this.props.id,taskId, obj )\n\n        todoListAPI.updateTask(this.props.id,task.id,task)\n            .then(data => {\n                if (data.resultCode === 0) {\n                    debugger\n                    this.props.changeTask(data.data.item)\n                }\n            });\n    }\n\n    changeStatus = (task, status) => {\n\n        this.changeTask({...task, status: status === true ? 2 : 0})\n\n    }\n\n    changeTitle = (task, title) => {\n        debugger\n        this.changeTask({...task, title: title})\n\n    }\n\n    changePriority = (task, priority) => {\n        this.changeTask({...task, priority: priority === 'high' ? 2 : priority === 'medium' ? 1 : 0 })\n    }\n\n    isTodoListDeleted = () => {\n        this.props.deleteTodoList(this.props.id);\n    }\n\n\n    render = () => {\n        let {tasks = []} = this.props;\n\n        let filteredTasks = tasks.filter(t => {\n            switch (this.state.filterValue) {\n                case \"Active\":\n                    return t.status === 0;\n                case \"Completed\":\n                    return t.status === 2;\n                case \"All\":\n                    return true;\n\n                default:\n                    return true;\n\n            }\n        })\n\n        return (\n\n            <div className=\"todoList\">\n                <TodoListTitle title={this.props.title}/> <span onClick={this.isTodoListDeleted}> <FontAwesomeIcon\n                className='times-header' icon={faTimes}/></span>\n                <AddNewItemForm title={this.props.title} addItem={this.addTask}/>\n                <TodoListTasks changePriority={this.changePriority}\n                               deleteTask={this.deleteTask} changeTitle={this.changeTitle} tasks={filteredTasks}\n                               changeStatus={this.changeStatus}/>\n                <TodoListFooter filerValue={this.state.filterValue} changeFilter={this.changeFilter}/>\n\n\n            </div>\n        );\n    }\n}\n\n\n// const mapStateToProps = (state) => {\n//     return {\n//         tasks: state.todolists.tasks\n//     }\n// }\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        addTask: (todolistId, newTask) => {\n            // let action = {\n            //     type: 'ADD_TASK',\n            //     newTask,\n            //     todolistId\n            //\n            // }\n\n            dispatch(addTaskActionCreator(todolistId, newTask))\n        },\n        changeTask: (task) => {\n            // let action = {\n            //     type: 'CHANGE_TASK',\n            //     todolistId,\n            //     taskId,\n            //     obj\n            //\n            // }\n            debugger\n            dispatch(changeTaskActionCreator(task))\n        },\n        deleteTask: (todolistId, taskId) => {\n            // let action = {\n            //     type: 'DELETE_TASK',\n            //     todolistId,\n            //     taskId\n            //\n            // }\n\n            dispatch(deleteTaskActionCreator(todolistId, taskId))\n        },\n        setTasks: (todolistId, tasks) => {\n            dispatch(setTasksActionCreator(todolistId, tasks))\n        }\n    }\n}\n\nconst ConnectedTodoList = connect(null, mapDispatchToProps)(TodoList)\n\nexport default ConnectedTodoList;\n\n","import React from 'react';\nimport './App.css';\nimport TodoList from \"./TodoList\";\nimport AddNewItemForm from \"./AddNewItemForm\";\nimport {connect} from \"react-redux\";\nimport {addTodoListActionCreator, deleteTodoListActionCreator, setTodoListsActionCreator} from \"./reducer\";\nimport * as axios from 'axios'\nimport {todoListAPI} from \"./api\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport { MenuIcon } from '@material-ui/core';\nimport Drawer from \"@material-ui/core/Drawer\";\nimport SwipeableDrawer from \"@material-ui/core/SwipeableDrawer\";\nimport Menu from \"@material-ui/core/Menu\";\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\n\nclass App extends React.Component {\n    state = {\n        todolists: [\n            // {id:1, title:'What to learn?'},\n            // {id:2, title:'Week tasks'},\n            // {id:3, title:'Year tasks'}\n        ]\n    }\n\n    nextTodoListId = 0;\n    // saveState = () => {\n    //     let stateAsString = JSON.stringify(this.state);\n    //     localStorage.setItem('todolists', stateAsString)\n    //\n    // }\n    // restoreState = () => {\n    //     let state = {\n    //         todolists: []\n    //     };\n    //     let stateAsString = localStorage.getItem('todolists');\n    //     if (stateAsString) {\n    //         state = JSON.parse(stateAsString);\n    //     }\n    //     this.setState(state, () => {\n    //         this.state.todolists.forEach(t => {\n    //                 if (t.id >= this.nextTodoListId) {\n    //                     this.nextTodoListId = t.id + 1\n    //                 }\n    //             }\n    //         )\n    //     })\n    // }\n\n\n    restoreState = () => {\n        todoListAPI.getTodoLists()\n            .then(data => {\n                this.props.setTodoLists(data);\n            });\n    }\n\n    componentDidMount() {\n        this.restoreState();\n    }\n\n    addTodoList = (title) => {\n        // let newTodoList = {\n        //     id: this.nextTodoListId,\n        //     title: title,\n        //     tasks: []\n        // }\n        // this.nextTodoListId++;\n        // let newTodoList = [...this.state.todolists, todoList];\n        // this.setState({\n        //     todolists: newTodoList\n        // },this.saveState)\n        // this.props.createTodolist(newTodoList)\n\n        todoListAPI.postTodoList(title)\n            .then(data => {\n                let todolists = data.data.item;\n                this.props.createTodolist(todolists);\n            });\n\n    }\n\n    deleteTodoList = (todolistId) => {\n\n        // let newTodoList = this.props.todolists.filter(t => {\n        //     return t.id !== todolistId;\n        // });\n\n        // this.props.deleteTodolist(todolistId)\n        // this.setState({\n        //     todolists: newTodoList\n        // }, this.saveState);\n\n        todoListAPI.deleteList(todolistId)\n            .then(data => {\n                if (data.resultCode === 0) {\n                    this.props.deleteTodolist(todolistId)\n                }\n            });\n\n\n    }\n\n    render = () => {\n        const todolist = this.props.todolists.map(tl => <Grid item> <Paper style={{padding: '10px'}}> <TodoList key={tl.id} tasks={tl.tasks}\n                                                                  deleteTodoList={this.deleteTodoList} id={tl.id}\n                                                                             title={tl.title}/> </Paper> </Grid>)\n\n        return (<div>\n                <AppBar position=\"static\">\n                    <Toolbar>\n                        <IconButton edge=\"start\" className='menuButton' color=\"inherit\" aria-label=\"menu\">\n                            <Menu />\n                        </IconButton>\n                        <Typography variant=\"h6\" className='title'>\n                            News\n                        </Typography>\n                        <Button color=\"inherit\">Login</Button>\n                    </Toolbar>\n                </AppBar>\n                <Container fixed>\n                    <Grid container style={{padding: '20px'}}>\n\n                <AddNewItemForm addItem={this.addTodoList}/>\n                    </Grid>\n                    <Grid container spacing={3}>\n\n                    {todolist}\n\n                    </Grid>\n                </Container>\n            </div>\n        )\n\n\n    }\n}\n\n\nconst mapStateToProps = (state) => {\n    return {\n        todolists: state.todolists\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        createTodolist: (newTodoList) => {\n            dispatch(addTodoListActionCreator(newTodoList))\n\n        },\n        deleteTodolist: (todolistId) => {\n            dispatch(deleteTodoListActionCreator(todolistId))\n        },\n        setTodoLists: (todolists) => {\n            dispatch(setTodoListsActionCreator(todolists))\n        }\n    }\n}\n\nconst ConnectedApp = connect(mapStateToProps, mapDispatchToProps)(App);\nexport default ConnectedApp;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\r\nimport {createStore} from \"redux\";\r\nimport reducer from \"./reducer\";\r\n\r\n\r\nconst store = createStore(reducer);\r\nexport default store;\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(<Provider store={store}>\n    <App/>\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}